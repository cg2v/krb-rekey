#!/usr/bin/perl

use strict;
use vars qw($TestFile @princs %fprincs $NS %pats $REALM);
use vars qw($CLEAR $QUIET $count $pass $fail $lose);

if ($ARGV[0] eq '-q') { $QUIET = 1; shift @ARGV }
$REALM = '@REKEY.EXAMPLE';
$TestFile = '/tmp/rekey-test-acl';
$count = $pass = $fail = $lose = 0;
$CLEAR = "\r" . (' ' x 78) . "\r";

@princs = qw(
  foo              zoo
  foo/bar          zoo/bar
  foo/bar/baz      zoo/bar/baz
  foo/bar/baz/quux zoo/bar/baz/quux
  foo/bar/xaz      zoo/bar/xaz
  foo/bar/xaz/quux zoo/bar/xaz/quux
  foo/yar          zoo/yar
  foo/yar/baz      zoo/yar/baz
  foo/yar/baz/quux zoo/yar/baz/quux
  foo/yar/xaz      zoo/yar/xaz
  foo/yar/xaz/quux zoo/yar/xaz/quux
);

%fprincs = (
  'foo'         => 3,
  'bar'         => 3,
  'baz'         => 0,
  'foo/bar'     => 0,
  'foo/foo'     => 1,
  'foo/bar/baz' => 0,
);

$NS = '[^/]*';
%pats = (
  '*'           => [ grep(m{^$NS$},         @princs) ],
  '**'          => [ @princs,                        ],
  '*/*'         => [ grep(m{^$NS/$NS$},     @princs) ],
  '*/**'        => [ grep(m{/},             @princs) ],
  '*/*/**'      => [ grep(m{/.*/},          @princs) ],
  '*/*/baz'     => [ grep(m{^$NS/$NS/baz$}, @princs) ],
  '*/bar'       => [ grep(m{^$NS/bar$},     @princs) ],
  '*/bar/**'    => [ grep(m{^$NS/bar/},     @princs) ],
  '*/bar/baz'   => [ grep(m{^$NS/bar/baz$}, @princs) ],
  'foo'         => [ 'foo'                           ],
  'foo/*'       => [ grep(m{^foo/$NS$},     @princs) ],
  'foo/**'      => [ grep(m{^foo/},         @princs) ],
  'foo/*/**'    => [ grep(m{^foo/$NS/},     @princs) ],
  'foo/*/baz'   => [ grep(m{^foo/$NS/baz$}, @princs) ],
  'foo/bar/*'   => [ grep(m{^foo/bar/$NS$}, @princs) ],
  'foo/bar/**'  => [ grep(m{^foo/bar/},     @princs) ],
  'foo/bar'     => [ 'foo/bar'                       ],
  'foo/bar/baz' => [ 'foo/bar/baz'                   ],
);

sub doit (@) {
  my($wanted, @args) = @_;
  my($answer);

  $count++;
  $answer = system('./try_acl', @args);
  if (!$answer || $answer == 99 << 8) {
    if (!$answer == $wanted) {
      printf("%4d %4d PASS\n", $wanted, !$answer) unless $QUIET;
      $pass++;
    } else {
      printf("%4d %4d FAIL\n", $wanted, !$answer);
      $fail++;
    }
  } else {
    if ($answer < 0)       { print "$!\n"                                  }
    elsif ($answer & 0x7f) { printf("Died on signal %d\n", $answer & 0x7f) }
    else                   { printf("Exit %d\n", $answer >> 8)             }
    $lose++;
  }
}

print "Running pattern tests:\n";
print "Pattern              Subject              Want  Got Result\n";
print "==================== ==================== ==== ==== ======\n";
foreach my $exact ('', 'e') {
  my $ee = $exact ? 'E:' : '';
  foreach my $neg ('', '!') {
    next if $exact && $neg;
    foreach my $pattern (sort keys %pats) {
      my %wanted = map(($_ => 1), $exact ? ($pattern) : @{$pats{$pattern}});
      foreach my $subject (sort @princs) {
        my $wanted = $neg ? !$wanted{$subject} : $wanted{$subject};
        print $CLEAR;
        printf("%-20s %-20s ", $ee.$neg.$pattern, $subject);
        doit($wanted, "s$exact", $neg.$pattern.$REALM, $subject.$REALM);
      }
    }
  }
}
print "$CLEAR\n";

print "Running builtin ACL tests:\n";
print "Subject              Want  Got Result\n";
print "==================== ==== ==== ======\n";
foreach my $exact ('', 'e') {
  my $ee = $exact ? 'E:' : '';
  my $mask = $exact ? 2 : 1;
  foreach my $subject (sort keys %fprincs) {
    my $wanted = !!($fprincs{$subject} & $mask);
    print $CLEAR;
    printf("%-20s ", $ee.$subject);
    doit($wanted, 'b'.$exact, $subject.$REALM);
  }
}
print "$CLEAR\n";

my $file_err = system('./try_acl', 'o', $TestFile);
if ($file_err < 0) { print "try_acl: $!\n" }
elsif ($file_err)  { print "try_acl: $file_err\n" }

if ($file_err) {
  print "Not running file ACL tests\n";
} else {
  print "Running file ACL tests:\n";
  print "Subject              Want  Got Result\n";
  print "==================== ==== ==== ======\n";
  foreach my $exact ('', 'e') {
    my $ee = $exact ? 'E:' : '';
    my $mask = $exact ? 2 : 1;
    foreach my $subject (sort keys %fprincs) {
      my $wanted = !!($fprincs{$subject} & $mask);
      print $CLEAR;
      printf("%-20s ", $ee.$subject);
      doit($wanted, 'f'.$exact, $TestFile, $subject.$REALM);
    }
  }
  unlink($TestFile);
}
print "$CLEAR\n";

print "Tests passed:    $pass\n" if $pass;
print "Tests failed:    $fail\n" if $fail;
print "Broken tests:    $lose\n" if $lose;
print "Total tests run: $count\n";
exit 1 if $fail || $lose;
